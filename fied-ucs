#!/bin/bash

echo "üß™ Finding apps that failed to start or stage (TAS 6 Crash Diagnosis)..."

cf curl /v3/apps | jq -c '.resources[]' | while read -r app; do
    APP_GUID=$(echo "$app" | jq -r '.guid')
    APP_NAME=$(echo "$app" | jq -r '.name')
    APP_STATE=$(echo "$app" | jq -r '.state')
    SPACE_GUID=$(echo "$app" | jq -r '.relationships.space.data.guid')

    # Get org/space info
    SPACE_JSON=$(cf curl /v3/spaces/$SPACE_GUID)
    SPACE_NAME=$(echo "$SPACE_JSON" | jq -r '.name')
    ORG_GUID=$(echo "$SPACE_JSON" | jq -r '.relationships.organization.data.guid')
    ORG_NAME=$(cf curl /v3/organizations/$ORG_GUID | jq -r '.name')

    ############################
    ## 1. Get Staging Error
    ############################
    BUILDS_JSON=$(cf curl "/v3/apps/${APP_GUID}/builds")
    BUILD_COUNT=$(echo "$BUILDS_JSON" | jq '.pagination.total_results')

    STAGING_ERROR=""
    if [ "$BUILD_COUNT" -gt 0 ]; then
        LAST_BUILD=$(echo "$BUILDS_JSON" | jq -c '.resources | sort_by(.created_at) | last')
        if echo "$LAST_BUILD" | jq -e 'type=="object"' > /dev/null 2>&1; then
            STAGING_ERROR=$(echo "$LAST_BUILD" | jq -r '.error.message // ""')
        fi
    fi

    ############################
    ## 2. Get Crash Reason from v2/instances
    ############################
    EXIT_DESCRIPTION=""
    INSTANCE_JSON=$(cf curl /v2/apps/$APP_GUID/instances 2>/dev/null)

    if echo "$INSTANCE_JSON" | jq -e 'type=="object"' > /dev/null 2>&1; then
        EXIT_DESCRIPTION=$(echo "$INSTANCE_JSON" | jq -r 'to_entries[]?.value?.exit_description // empty' | grep -v null | head -n 1)
    fi

    ############################
    ## 3. Print if either has issues
    ############################
    if [[ -n "$STAGING_ERROR" || -n "$EXIT_DESCRIPTION" ]]; then
        echo "‚ö†Ô∏è App: $APP_NAME"
        echo "   GUID: $APP_GUID"
        echo "   Org/Space: $ORG_NAME / $SPACE_NAME"
        echo "   State: $APP_STATE"
        if [[ -n "$STAGING_ERROR" ]]; then
            echo "   ‚ùå Staging Error: $STAGING_ERROR"
        fi
        if [[ -n "$EXIT_DESCRIPTION" ]]; then
            echo "   üí• Crash Reason: $EXIT_DESCRIPTION"
        fi
        echo ""
    fi
done
