#!/bin/bash

echo "üß™ Scanning for TAS 6 apps that failed to start or stage..."

cf curl /v3/apps | jq -c '.resources[]' | while read -r app; do
    APP_GUID=$(echo "$app" | jq -r '.guid')
    APP_NAME=$(echo "$app" | jq -r '.name')
    APP_STATE=$(echo "$app" | jq -r '.state')
    SPACE_GUID=$(echo "$app" | jq -r '.relationships.space.data.guid')

    # Get org and space info
    SPACE_JSON=$(cf curl /v3/spaces/$SPACE_GUID)
    SPACE_NAME=$(echo "$SPACE_JSON" | jq -r '.name')
    ORG_GUID=$(echo "$SPACE_JSON" | jq -r '.relationships.organization.data.guid')
    ORG_JSON=$(cf curl /v3/organizations/$ORG_GUID)
    ORG_NAME=$(echo "$ORG_JSON" | jq -r '.name')

    ############################
    ## 1. Get staging error safely
    ############################
    STAGING_ERROR=""
    BUILDS_RAW=$(cf curl "/v3/apps/${APP_GUID}/builds")

    if echo "$BUILDS_RAW" | jq -e 'type=="object"' >/dev/null 2>&1; then
        BUILD_COUNT=$(echo "$BUILDS_RAW" | jq -r '.pagination.total_results')
        if [[ "$BUILD_COUNT" -gt 0 ]]; then
            LAST_BUILD=$(echo "$BUILDS_RAW" | jq -c '.resources | sort_by(.created_at) | last')
            if echo "$LAST_BUILD" | jq -e 'type=="object" and has("error") and .error != null and (.error | type == "object") and has("message")' >/dev/null 2>&1; then
                STAGING_ERROR=$(echo "$LAST_BUILD" | jq -r '.error.message')
            fi
        fi
    fi

    ############################
    ## 2. Get crash reason safely
    ############################
    EXIT_DESCRIPTION=""
    INSTANCE_RAW=$(cf curl /v2/apps/${APP_GUID}/instances 2>/dev/null)

    if echo "$INSTANCE_RAW" | jq -e 'type=="object"' >/dev/null 2>&1; then
        # Avoiding crash if it's a stringified JSON or literal error
        EXIT_DESCRIPTION=$(echo "$INSTANCE_RAW" | jq -r 'try to_entries[]?.value?.exit_description // empty' 2>/dev/null | grep -v null | head -n 1)
    fi

    ############################
    ## 3. Only report if errors exist
    ############################
    if [[ -n "$STAGING_ERROR" || -n "$EXIT_DESCRIPTION" ]]; then
        echo "‚ö†Ô∏è App: $APP_NAME"
        echo "   GUID: $APP_GUID"
        echo "   Org/Space: $ORG_NAME / $SPACE_NAME"
        echo "   State: $APP_STATE"
        [[ -n "$STAGING_ERROR" ]] && echo "   ‚ùå Staging Error: $STAGING_ERROR"
        [[ -n "$EXIT_DESCRIPTION" ]] && echo "   üí• Crash Reason: $EXIT_DESCRIPTION"
        echo ""
    fi
done
